<?php    /**    * Competition Model    *    * Manages competitions    *    * @author Weblight.ro    * @copyright Weblight.ro    * @package BJ Tool    */	class Competition_model extends CI_Model	{		private $CI;		function __construct()		{			parent::__construct();			$this->CI =& get_instance();		}	        /**	* Get Competitions	*	*	* @return array	*/	function get_competitions ($filters = array())     {		$row = array();                        $order_dir = (isset($filters['sort_dir'])) ? $filters['sort_dir'] : 'ASC';                  if(isset($filters['country_id'])) $this->db->where('country_id',$filters['country_id']);                                      if(isset($filters['country_name'])) $this->db->like('country_name',$filters['country_name']);        if (isset($filters['limit'])) {                    $offset = (isset($filters['offset'])) ? $filters['offset'] : 0;                    $this->db->limit($filters['limit'], $offset);            }        $this->db->join('z_countries','z_competitions.country_id = z_countries.ID','left');               $this->db->order_by('country_name,name',$order_dir);		$result = $this->db->get('z_competitions');		foreach ($result->result_array() as $linie) {			$row[] = $linie;		}                       		return $row;															}            /**    * Get Competition    *    * @param int $id	    *    * @return array    */    function get_competition ($id)     {        $row = array();								                            $this->db->join('z_countries','z_competitions.country_id = z_countries.ID','left');        $this->db->where('competition_id',$id);        $result = $this->db->get('z_competitions');        foreach ($result->result_array() as $row) {                return $row;        }                return $row;                       }    /**    * Create New Competition    *    * Creates a new competition    *    * @param array $insert_fields	    *    * @return int $insert_id    */    function new_competition ($insert_fields)     {																					        $this->db->insert('z_competitions', $insert_fields);		        $insert_id = $this->db->insert_id();        return $insert_id;    }    /**    * Update Competition    *    * Updates competition    *     * @param array $update_fields    * @param int $id	    *    * @return boolean TRUE    */    function update_competition ($update_fields,$id)     {		        $this->db->update('z_competitions',$update_fields,array('competition_id' => $id));        return $id;    }    public function update_competition_by_link ($update_fields,$link)     {               $this->db->update('z_competitions',$update_fields,array('link' => $link));               return TRUE;    }    function competition_exists($competition)    {                                        //link is unique!        $this->db->where('link',$competition['link']);                        $result = $this->db->get('z_competitions');        foreach ($result->result_array() as $row) {                return $row['competition_id'];            }        return $result->num_rows();    }    /**    * Delete competition    *    * Deletes competition    * 	    * @param int $id	    * @return boolean TRUE    */    function delete_competition ($id)     {		        $this->db->delete('z_competitions',array('competition_id' => $id));        return TRUE;    }                                    function get_num_rows($competition_id,$filters)    {        $this->db->where('competition_id',$competition_id);               $result = $this->db->get('z_competitions');        return $result->num_rows();            }    function get_num_rowz($filters)    {                if(isset($filters['country_name'])) $this->db->like('country_name',$filters['country_name']);        $this->db->join('z_countries','z_competitions.country_id = z_countries.ID','left');                 $result = $this->db->get('z_competitions');        return $result->num_rows();            }    function fix_competitions ()     {    	$row = array();                                    	$result = $this->db->get('z_competitions');                        $this->load->model('country_model');    			    	foreach ($result->result_array() as $linie) {                            		$link = $linie['link'];                        $aux = explode('/',$link);                        $country_name = ucfirst(trim($aux[0]));                        $country_id = $this->country_model->get_country_by_name($country_name);                        $name = ucfirst(trim($aux[1]));                        $data_competition = array(                           'country_id' => $country_id,                           'name' =>  $name,                            'link_complete' => 'http://www.livescore.com/soccer/'.$link.'/',                                                                               );                        if(!$linie['country_id'] || !$linie['name'] || !$linie['link_complete']) {                            $this->update_competition ($data_competition,$linie['competition_id']);                        }    	}            	   return $row;														    }    function fix_competitions_name ()     {        $row = array();                                        $result = $this->db->get('z_competitions');                        $this->load->model('competition_model');                        foreach ($result->result_array() as $linie) {                                    $linie['name'] = str_replace('</span>','',$linie['name']);            $data_competition = array(                                                      'name' =>  $linie['name'],                                                                                                     );                                    $this->update_competition ($data_competition,$linie['competition_id']);                                                                                    }                   return $row;                                                         }		}